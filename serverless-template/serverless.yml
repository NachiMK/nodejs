###################################################################
##   FYI  ————————————————————————————————————————————————————   ##
##   Usually, nothing needs to be changed in this config file.   ##
##   Most everything you need to configure is in 'src/config.yml'##
###################################################################

service:                  ${file(package.json):name} # TODO: might we instead run
# one of the js functions in ./src/utils/index.js, like `${file(env.js):getAPIBasePath}`, etc.
frameworkVersion:         ">=1.26.0 <2.0.0"
plugins:
   # commented out webpack plugin due to issues with webpack errors regarding knex dialects. 
    - serverless-plugin-webpack   # must be listed FIRST
    - serverless-aws-documentation
    - serverless-domain-manager
    - serverless-prune-plugin
   # - serverless-offline-ssm
    - serverless-content-encoding
    - serverless-offline          # must be listed LAST
package:
  individually:           false  # Had out of memory errors when set to true. https://github.com/serverless-heaven/serverless-webpack/issues/299
  excludeDevDependencies: false
  exclude:                ['node_modules/**/aws-sdk/**']

custom:
  service:
    NAME:         ${file(package.json):name, 'untitled-api-service'}
    STAGE:        ${opt:stage, env:NODE_ENV, file(package.json):config.stage, 'dev'}
    REGION:       ${opt:region, file(package.json):config.region, 'us-west-2'}
    RUNTIME:      ${file(package.json):config.runtime, 'nodejs8.10'}
    VERSION:      ${file(package.json):version}
    DESCRIPTION:  ${file(package.json):description}

  documentation:
    # authorizers:  ${file(schemas/authorizers.yml)}
    description:  Hixme API | ${file(package.json):description}
    models:       ${file(schemas/all.yml)}
    summary:      ${file(package.json):description}
    version:      ${file(package.json):version}

  customDomain:
    basePath:             ${file(env.js):getAPIBasePath}
    certificateName:      '*.hixme.com'
    createRoute53Record:  false # leave as-is, unless you know what you're doing
    domainName:           ${file(env.js):getHostname}
    # NOTE! - Don't need to use function to get stage since its available in this file.
    stage:                ${self:custom.service.STAGE}

  serverless-offline:
    prefix: ${file(env.js):getAPIBasePath}

  webpack:
    series: false # Currently deploy fails when set to true

  cognitoPools:
    dev:  arn:aws:cognito-idp:us-west-2:409076796536:userpool/us-west-2_AXPnJkIR9
    int:  arn:aws:cognito-idp:us-west-2:409076796536:userpool/us-west-2_aZ2JNiTZp
    prod: arn:aws:cognito-idp:us-west-2:409076796536:userpool/us-west-2_Guj3GDdPC

  contentEncoding:
    minimumCompressionSize: 0 # Minimum body size required for compression in bytes (This compresses ALL responses in this service > 0 bytes)  

  prune: # remove old lambda versions automatically on each deploy and leave the last N
    automatic: true
    number: 3

provider:
  name:                   aws
  memorySize:             1536
  timeout:                30
  runtime:                ${self:custom.service.RUNTIME}
  stage:                  ${self:custom.service.STAGE}
  # NOTE! Had to hardcode region to 'us-west-2' for SSM https://github.com/serverless/serverless/issues/4251.   
  # Used to be region: ${self:custom.service.REGION}
  region:                 'us-west-2'
  deploymentBucket:
    serverSideEncryption: AES256
  stackTags:              &stackTags
    BASE_PATH:            ${self:custom.customDomain.basePath}
    DOMAIN_NAME:          ${self:custom.customDomain.domainName}
    REGION:               ${self:custom.service.REGION}
    SERVICE:              ${self:custom.service.NAME}
    STAGE:                ${self:custom.service.STAGE}
    VERSION:              ${self:custom.service.VERSION}
  # TODO: improve the (below) 'environment' function so that it exports 'stackTags'!
  environment:            ${file(env.js):getAndSetVarsFromEnvFile}
  iamRoleStatements:      ${file(src/config.yml):iamRoleStatements}
  vpc:
    securityGroupIds:
      - sg-0c3aa668
    subnetIds:
      - subnet-df4b3da8
      - subnet-37b2e252

functions:                ${file(src/config.yml):functions}

resources:
  Resources: 
    # Set CORS headers on 4xx and 5xx errors
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  
 # TODO: Add support for setting resources in config.yml