{"version":3,"sources":["../../src/modules/objection-utils.js"],"names":["initKnexAsync","initKnex","destroyKnex","destroyKnexAsync","knex","stage","process","env","STAGE","config","DefaultSchemaQueryBuilder","constructor","modelClass","defaultSchema","withSchema","QueryBuilder","RelatedQueryBuilder","destroy","BaseModel"],"mappings":";;;;;;QAYsBA,a,GAAAA,a;QAINC,Q,GAAAA,Q;QA+BAC,W,GAAAA,W;QAKMC,gB,GAAAA,gB;;AApDtB;;;;AACA;;AAEA;;;;;;AAEA,IAAIC,IAAJ;;AAOO,eAAeJ,aAAf,GAA+B;AACpC,SAAOC,UAAP;AACD;;AAEM,SAASA,QAAT,GAAoB;AACzB,QAAMI,QAAQC,QAAQC,GAAR,CAAYC,KAA1B;AACA,QAAMC,SAAS,mBAAQJ,KAAR,CAAf;;AAGAD,SAAO,oBAAKK,MAAL,CAAP;;AAOA,mBAAML,IAAN,CAAWA,IAAX;;AAIA,QAAMM,yBAAN,iCAAqD;AACnDC,gBAAYC,UAAZ,EAAwB;AACtB,YAAMA,UAAN;AACA,UAAIA,WAAWC,aAAf,EAA8B;AAC5B,aAAKC,UAAL,CAAgBF,WAAWC,aAA3B;AACD;AACF;AANkD;;AASrD,mBAAME,YAAN,GAAqBL,yBAArB;AACA,mBAAMM,mBAAN,GAA4BN,yBAA5B;;AAEA,SAAON,IAAP;AACD;;AAEM,SAASF,WAAT,GAAuB;AAE5BE,OAAKa,OAAL;AACD;;AAEM,eAAed,gBAAf,GAAkC;AACvC,SAAOD,aAAP;AACD;;AAGM,MAAMgB,SAAN,0BAA8B;QAAxBA,S,GAAAA,S","file":"objection-utils.js","sourcesContent":["import Knex from 'knex';\nimport { Model, QueryBuilder } from 'objection';\n// import pg from 'pg';\nimport configs from '../../knexfile';\n\nlet knex;\n\n// NOTE! - This was copied from health-plan-service but not sure if we need it.\n// import knexDialect from 'knex/lib/dialects/postgres';\n// pg.types.setTypeParser(20, 'text', parseInt);\n// pg.types.setTypeParser(1700, parseFloat);\n\nexport async function initKnexAsync() {\n  return initKnex();\n}\n\nexport function initKnex() {\n  const stage = process.env.STAGE;\n  const config = configs[stage];\n\n  // Initialize knex using the current stage\n  knex = Knex(config);\n\n  // knex.client = knexDialect;\n\n  // Bind all Models to a knex instance. If you only have one database in\n  // your server this is all you have to do. For multi database systems, see\n  // the Model.bindKnex method.\n  Model.knex(knex);\n\n  // Add ability to set defaultSchema method on your models\n  // https://github.com/Vincit/objection.js/issues/85\n  class DefaultSchemaQueryBuilder extends QueryBuilder {\n    constructor(modelClass) {\n      super(modelClass);\n      if (modelClass.defaultSchema) {\n        this.withSchema(modelClass.defaultSchema);\n      }\n    }\n  }\n\n  Model.QueryBuilder = DefaultSchemaQueryBuilder;\n  Model.RelatedQueryBuilder = DefaultSchemaQueryBuilder;\n\n  return knex;\n}\n\nexport function destroyKnex() {\n  // Knex needs to be destroyed or it will continue to hang the thread.\n  knex.destroy();\n}\n\nexport async function destroyKnexAsync() {\n  return destroyKnex();\n}\n\n// We should have all our Objection models extend from BaseModel to give us a place to set global properties\nexport class BaseModel extends Model {\n  // TODO: Might be nice to have camelCase properties returned but keep the TitleCase column names in DB.\n  // static get columnNameMappers() {\n  //   return snakeCaseMappers({ upperCase: false });\n  // }\n}\n"]}