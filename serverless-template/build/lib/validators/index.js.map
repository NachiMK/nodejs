{"version":3,"sources":["../../../src/lib/validators/index.js"],"names":["validateAjv","getPayload","getJsonSchema","event","ajv","coerceTypes","allErrors","verbose","format","removeAdditional","schema","data","exists","existsSync","JSON","parse","readFileSync","res","json","validate","compile","valid","validationErrors","errors","map","item","message","dataPath","Array","isArray","err","Error","statusCode","validateBody","body","validateQuery","query","validateParams","params","validateQueryAndParams","Object","assign","validateAll"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEO,MAAMA,oCAAcC,cAAcC,iBAAiB,MAAOC,KAAP,IAAiB;AACzE,QAAMC,MAAM,kBAAQ;AAClBC,iBAAa,IADK;AAElBC,eAAW,IAFO;AAGlBC,aAAS,IAHS;AAIlBC,YAAQ,MAJU;AAKlBC,sBAAkB;AALA,GAAR,CAAZ;;AAQA,MAAIC,SAAS,IAAb;AACA,MAAIC,OAAO,IAAX;;AAEA,MAAI,wBAAWT,aAAX,CAAJ,EAA+B;AAC7BQ,aAAS,MAAMR,cAAcC,KAAd,CAAf;AACD,GAFD,MAEO;AACLO,aAASR,aAAT;AACD;;AAED,MAAI,sBAASQ,MAAT,CAAJ,EAAsB;AACpB,UAAME,SAAS,aAAGC,UAAH,CAAcH,MAAd,CAAf;AACA,QAAIE,MAAJ,EAAY;AACVF,eAASI,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgBN,MAAhB,EAAwB,MAAxB,CAAX,CAAT;AACD,KAFD,MAEO;AACL,YAAMO,MAAM,MAAM,yBAAMf,aAAN,CAAlB;AACAQ,eAAS,MAAMO,IAAIC,IAAJ,EAAf;AACD;AACF;;AAKD,QAAMC,WAAWf,IAAIgB,OAAJ,CAAYV,MAAZ,CAAjB;;AAEA,MAAI,wBAAWT,UAAX,CAAJ,EAA4B;AAC1BU,WAAO,MAAMV,WAAWE,KAAX,CAAb;AACD,GAFD,MAEO;AACLQ,WAAOV,UAAP;AACD;;AAED,QAAMoB,QAAQF,SAASR,IAAT,CAAd;;AAEA,MAAI,CAACU,KAAL,EAAY;AACV,UAAMC,mBAAmBH,SAASI,MAAT,CAAgBC,GAAhB,CAAoBC,SAAS;AACpDC,eAAU,GAAED,KAAKE,QAAS,IAAGF,KAAKC,OAAQ,GAAEE,MAAMC,OAAN,CAAcJ,KAAKf,MAAnB,IAA6Be,KAAKf,MAAlC,GAA2C,EAAG;AADtC,KAAT,CAApB,CAAzB;AAGA,UAAMoB,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAZ;AACAD,QAAIP,MAAJ,GAAaD,gBAAb;AACAQ,QAAIE,UAAJ,GAAiB,GAAjB;AACA,UAAMF,GAAN;AACD;AACF,CAlDM;;AAoDA,MAAMG,sCAAejC,YAAYG,SAASA,MAAM+B,IAA3B,CAArB;AACA,MAAMC,wCAAgBnC,YAAYG,SAASA,MAAMiC,KAA3B,CAAtB;AACA,MAAMC,0CAAiBrC,YAAYG,SAASA,MAAMmC,MAA3B,CAAvB;AACA,MAAMC,0DAAyBvC,YAAY,CAAC;AACjDoC,UAAQ,EADyC;AAEjDE,WAAS;AAFwC,CAAD,KAG5CE,OAAOC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyBE,MAAzB,CAHgC,CAA/B;AAIA,MAAMI,oCAAc1C,YAAY,CAAC;AACtCkC,SAAO,EAD+B;AAEtCE,UAAQ,EAF8B;AAGtCE,WAAS;AAH6B,CAAD,KAIjCE,OAAOC,MAAP,CAAc,EAAd,EAAkBP,IAAlB,EAAwBE,KAAxB,EAA+BE,MAA/B,CAJqB,CAApB","file":"index.js","sourcesContent":["import Ajv from 'ajv'\nimport fs from 'fs'\nimport { isFunction, isString } from 'lodash'\nimport fetch from 'node-fetch'\n\nexport const validateAjv = getPayload => getJsonSchema => async (event) => {\n  const ajv = new Ajv({\n    coerceTypes: true,\n    allErrors: true,\n    verbose: true,\n    format: 'full',\n    removeAdditional: true,\n  })\n\n  let schema = null\n  let data = null\n\n  if (isFunction(getJsonSchema)) {\n    schema = await getJsonSchema(event)\n  } else {\n    schema = getJsonSchema\n  }\n\n  if (isString(schema)) {\n    const exists = fs.existsSync(schema)\n    if (exists) {\n      schema = JSON.parse(fs.readFileSync(schema, 'utf8'))\n    } else {\n      const res = await fetch(getJsonSchema)\n      schema = await res.json()\n    }\n  }\n\n  // TODO: Modify schema to allow removing additional (need to do recursively)\n  // schema.additionalProperties = false;\n\n  const validate = ajv.compile(schema)\n\n  if (isFunction(getPayload)) {\n    data = await getPayload(event)\n  } else {\n    data = getPayload\n  }\n\n  const valid = validate(data)\n\n  if (!valid) {\n    const validationErrors = validate.errors.map(item => ({\n      message: `${item.dataPath} ${item.message}${Array.isArray(item.schema) ? item.schema : ''}`,\n    }))\n    const err = new Error('Request is not valid')\n    err.errors = validationErrors\n    err.statusCode = 400\n    throw err\n  }\n}\n\nexport const validateBody = validateAjv(event => event.body)\nexport const validateQuery = validateAjv(event => event.query)\nexport const validateParams = validateAjv(event => event.params)\nexport const validateQueryAndParams = validateAjv(({\n  query = {},\n  params = {},\n}) => Object.assign({}, query, params))\nexport const validateAll = validateAjv(({\n  body = {},\n  query = {},\n  params = {},\n}) => Object.assign({}, body, query, params))\n"]}