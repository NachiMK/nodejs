{"version":3,"sources":["../debug.js"],"names":["generateSchema","require","persons","Id","FirstName","Gender","BirthDate","DivisionCode","NumberAndString","Salary","DateUpdated","schema","json","console","log","JSON","stringify","schemaWithPopFormat","pickPopularFormat","schemaWithCounts","addFormatCounts","schemaWithEnums","generateEnums","maxEnumValues","generateLengths"],"mappings":"AAAA,MAAMA,iBAAiBC,QAAQ,SAAR,CAAvB;AACA,MAAMC,UAAU,CACd;AACEC,MAAI,sCADN;AAEEC,aAAW,MAFb;AAGEC,UAAQ,MAHV;AAIEC,aAAW,YAJb;AAKEC,gBAAc,KALhB;AAMEC,mBAAiB,MANnB;AAOEC,UAAQ,YAPV;AAQEC,eAAa;AARf,CADc,EAWd;AACEP,MAAI,sCADN;AAEEC,aAAW,QAFb;AAGEC,UAAQ,MAHV;AAIEC,aAAW,YAJb;AAKEC,gBAAc,KALhB;AAMEC,mBAAiB,MANnB;AAOEC,UAAQ,CAAC,OAPX;AAQEC,eAAa;AARf,CAXc,EAqBd;AACEP,MAAI,sCADN;AAEEC,aAAW,MAFb;AAGEC,UAAQ,QAHV;AAIEC,aAAW,YAJb;AAKEC,gBAAc,KALhB;AAMEC,mBAAiB,KANnB;AAOEC,UAAQ,OAPV;AAQEC,eAAa;AARf,CArBc,EA+Bd;AACEP,MAAI,+CADN;AAEEC,aAAW,OAFb;AAGEC,UAAQ,QAHV;AAIEC,aAAW,UAJb;AAKEC,gBAAc,2BALhB;AAMEC,mBAAiB,EANnB;AAOEC,UAAQ,UAPV;AAQEC,eAAa;AARf,CA/Bc,CAAhB;;AA2CA,MAAMC,SAASX,eAAeY,IAAf,CAAoB,QAApB,EAA8BV,OAA9B,CAAf;AACAW,QAAQC,GAAR,CAAY,eAAZ,EAA6BC,KAAKC,SAAL,CAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAA7B;;AAEA,MAAMM,sBAAsBjB,eAAeY,IAAf,CAAoB,QAApB,EAA8BV,OAA9B,EAAuC;AACjEgB,qBAAmB;AAD8C,CAAvC,CAA5B;AAGAL,QAAQC,GAAR,CACE,uCADF,EAEEC,KAAKC,SAAL,CAAeC,mBAAf,EAAoC,IAApC,EAA0C,CAA1C,CAFF;;AAKA;AACA,MAAME,mBAAmBnB,eAAeY,IAAf,CAAoB,QAApB,EAA8BV,OAA9B,EAAuC;AAC9DkB,mBAAiB;AAD6C,CAAvC,CAAzB;AAGAP,QAAQC,GAAR,CACE,sCADF,EAEEC,KAAKC,SAAL,CAAeG,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAFF;;AAKA,MAAME,kBAAkBrB,eAAeY,IAAf,CAAoB,QAApB,EAA8BV,OAA9B,EAAuC;AAC7DoB,iBAAe,IAD8C;AAE7DC,iBAAe,CAF8C;AAG7DC,mBAAiB;AAH4C,CAAvC,CAAxB;AAKAX,QAAQC,GAAR,CAAY,wBAAZ,EAAsCC,KAAKC,SAAL,CAAeK,eAAf,EAAgC,IAAhC,EAAsC,CAAtC,CAAtC","file":"debug.js","sourcesContent":["const generateSchema = require(\"./index\");\nconst persons = [\n  {\n    Id: \"363f1eec-a814-4518-a738-6cb844b6cf92\",\n    FirstName: \"John\",\n    Gender: \"Male\",\n    BirthDate: \"2000-04-01\",\n    DivisionCode: \"PRP\",\n    NumberAndString: \"test\",\n    Salary: 10023.456787,\n    DateUpdated: \"2018-01-16T23:33:01+00:00\"\n  },\n  {\n    Id: \"474f1eec-a814-4518-a738-6cb844b6cf92\",\n    FirstName: \"Negate\",\n    Gender: \"Male\",\n    BirthDate: \"1999-05-01\",\n    DivisionCode: \"SFW\",\n    NumberAndString: \"test\",\n    Salary: -10023.5,\n    DateUpdated: \"2018-01-16T23:33:01+00:00\"\n  },\n  {\n    Id: \"363f1eec-a814-4518-a738-6cb844b6cf92\",\n    FirstName: \"Rani\",\n    Gender: \"Female\",\n    BirthDate: \"2002-04-01\",\n    DivisionCode: \"HDW\",\n    NumberAndString: \"one\",\n    Salary: 10023.7,\n    DateUpdated: \"2018-01-16T23:33:01+00:00\"\n  },\n  {\n    Id: \"abaa80cc-e0eb-4a33-8292-ec937ffe773b_INACTIVE\",\n    FirstName: \"Cindy\",\n    Gender: \"Female\",\n    BirthDate: \"March 10\",\n    DivisionCode: \"2018-01-16T23:33:44+00:00\",\n    NumberAndString: 10,\n    Salary: 10023.4501,\n    DateUpdated: \"2018-01-16T23:33:44+00:00\"\n  }\n];\n\nconst schema = generateSchema.json(\"Person\", persons);\nconsole.log(\"Without enums\", JSON.stringify(schema, null, 2));\n\nconst schemaWithPopFormat = generateSchema.json(\"Person\", persons, {\n  pickPopularFormat: true\n});\nconsole.log(\n  \"Without enums but with Popular Format\",\n  JSON.stringify(schemaWithPopFormat, null, 2)\n);\n\n// test adding format counts\nconst schemaWithCounts = generateSchema.json(\"Person\", persons, {\n  addFormatCounts: true\n});\nconsole.log(\n  \"Without enums but with Format Counts\",\n  JSON.stringify(schemaWithCounts, null, 2)\n);\n\nconst schemaWithEnums = generateSchema.json(\"Person\", persons, {\n  generateEnums: true,\n  maxEnumValues: 2,\n  generateLengths: true\n});\nconsole.log(\"With enums and lengths\", JSON.stringify(schemaWithEnums, null, 2));\n"]}