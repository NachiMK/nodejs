{"version":3,"sources":["../schema.test.js"],"names":["generateSchema","require","persons","Id","FirstName","Gender","BirthDate","DivisionCode","NumberAndString","BooleanAndString","JustBoolean","Salary","DateUpdated","test","schema","json","expect","items","properties","toBeDefined","format","toBe","enum","toBeUndefined","pickPopularFormat","addFormatCounts","formats","generateEnums","maxEnumValues","generateLengths"],"mappings":"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","file":"schema.test.js","sourcesContent":["const generateSchema = require(\"./index\");\n\nconst persons = [\n  {\n    Id: \"363f1eec-a814-4518-a738-6cb844b6cf92\",\n    FirstName: \"John\",\n    Gender: \"Male\",\n    BirthDate: \"2000-04-01\",\n    DivisionCode: \"PRP\",\n    NumberAndString: \"test\",\n    BooleanAndString: true,\n    JustBoolean: true,\n    Salary: 10023.456787,\n    DateUpdated: \"2018-01-16T23:33:01+00:00\"\n  },\n  {\n    Id: \"474f1eec-a814-4518-a738-6cb844b6cf92\",\n    FirstName: \"Negate\",\n    Gender: \"Male\",\n    BirthDate: \"1999-05-01\",\n    DivisionCode: \"SFW\",\n    NumberAndString: \"test\",\n    BooleanAndString: false,\n    JustBoolean: false,\n    Salary: -10023.5,\n    DateUpdated: \"2018-01-16T23:33:01+00:00\"\n  },\n  {\n    Id: \"363f1eec-a814-4518-a738-6cb844b6cf92\",\n    FirstName: \"Rani\",\n    Gender: \"Female\",\n    BirthDate: \"2002-04-01\",\n    DivisionCode: \"HDW\",\n    NumberAndString: \"one\",\n    BooleanAndString: \"false\",\n    JustBoolean: true,\n    Salary: 10023.7,\n    DateUpdated: \"2018-01-16T23:33:01+00:00\"\n  },\n  {\n    Id: \"abaa80cc-e0eb-4a33-8292-ec937ffe773b_INACTIVE\",\n    FirstName: \"Cindy\",\n    Gender: \"Female\",\n    BirthDate: \"March 10\",\n    DivisionCode: \"2018-01-16T23:33:44+00:00\",\n    NumberAndString: 10,\n    BooleanAndString: true,\n    JustBoolean: true,\n    Salary: 10023.4501,\n    DateUpdated: \"2018-01-16T23:33:44+00:00\"\n  }\n];\n\ntest(\"Schema with no Enums\", () => {\n  const schema = generateSchema.json(\"Person\", persons);\n  // console.log(\"Without enums\", JSON.stringify(schema, null, 2));\n  expect(schema.items.properties.Id).toBeDefined();\n  expect(schema.items.properties.DivisionCode.format).toBeDefined();\n  expect(schema.items.properties.DivisionCode.format).toBe(\"date-time\");\n  expect(schema.items.properties.DivisionCode.enum).toBeUndefined();\n});\n\ntest(\"Schema with Popular Format\", () => {\n  const schema = generateSchema.json(\"Person\", persons, {\n    pickPopularFormat: true\n  });\n  // console.log(\"Without enums\", JSON.stringify(schema, null, 2));\n  expect(schema.items.properties.Id).toBeDefined();\n  expect(schema.items.properties.DivisionCode.format).toBeDefined();\n  expect(schema.items.properties.DivisionCode.format).toBe(\"string\");\n  expect(schema.items.properties.DivisionCode.enum).toBeUndefined();\n  expect(schema.items.properties.JustBoolean.format).toBe(\"boolean\");\n  //expect(schema.items.properties.BooleanAndString.format).toBe(\"string\");\n  expect(schema.items.properties.BooleanAndString.format).toBe(\"boolean\");\n});\n\ntest(\"Schema with Format counts\", () => {\n  const schema = generateSchema.json(\"Person\", persons, {\n    addFormatCounts: true\n  });\n  // console.log(\"Without enums\", JSON.stringify(schema, null, 2));\n  expect(schema.items.properties.Id).toBeDefined();\n  expect(schema.items.properties.DivisionCode.format).toBeDefined();\n  expect(schema.items.properties.DivisionCode.formats).toBeDefined();\n});\n\ntest(\"Schema with Enums\", () => {\n  const schema = generateSchema.json(\"Person\", persons, {\n    generateEnums: true,\n    maxEnumValues: 2,\n    generateLengths: true\n  });\n  // console.log(\"Without enums\", JSON.stringify(schema, null, 2));\n  expect(schema.items.properties.Id).toBeDefined();\n  expect(schema.items.properties.DivisionCode.enum).toBeDefined();\n});\n"]}