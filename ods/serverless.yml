service: ${self:custom.service.NAME}

# This simply locks us into a specific version range of Serverless
frameworkVersion: ">=1.26.0 <2.0.0"

plugins: [
  'serverless-aws-documentation',
  'serverless-plugin-webpack',
  'serverless-domain-manager' ]

custom:
  service:
    NAME: ${file(package.json):name}
    REGION: ${opt:region, file(package.json):config.region}
    RUNTIME: ${file(package.json):config.runtime}
    STAGE: ${opt:stage, env:NODE_ENV, file(package.json):config.stage}
    VERSION: ${file(package.json):version}
    DESCRIPTION: ${file(package.json):description}
  environment: ${file(env.js):getAndSetVarsFromEnvFile}
  documentation:
    # authorizers:  ${file(schemas/authorizers.yml)}
    description: "Hixme API | ${self:custom.service.DESCRIPTION}"
    models:       ${file(schemas/all.yml)}
    # resources:    ${file(schemas/resources.yml)}
    summary: ${self:custom.service.DESCRIPTION}
    version: ${self:custom.service.VERSION}
  customDomain:
    basePath: ${file(env.js):getAPIBasePath}
    domainName: "${file(env.js):getHostname}"
    stage: ${self:custom.service.STAGE}
    certificateName: "*.hixme.com"
  cognitoPools:
    dev: arn:aws:cognito-idp:us-west-2:409076796536:userpool/us-west-2_AXPnJkIR9
    int: arn:aws:cognito-idp:us-west-2:409076796536:userpool/us-west-2_aZ2JNiTZp
    prod: arn:aws:cognito-idp:us-west-2:409076796536:userpool/us-west-2_Guj3GDdPC

provider:
  name: aws
  runtime: ${self:custom.service.RUNTIME}
  stage: ${self:custom.service.STAGE}
  memorySize: 1024
  timeout: 30
  region: ${self:custom.service.REGION}
  #stackTags: ${self:custom.environment}
  environment: ${self:custom.environment}

  vpc:
    securityGroupIds:
      - sg-0c3aa668
    subnetIds:
      - subnet-df4b3da8
      - subnet-37b2e252

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*Object
      Resource:
        - arn:aws:s3:::${self:custom.service.STAGE}-ods-data/*
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:us-west-2:409076796536:table/${self:custom.service.STAGE}*
    # - Effect: Allow
    #   Action:
    #     - sts:AssumeRole
    #   Condition:
    #     StringLike:
    #       - aws:userid:*:awslambda_*
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:us-west-2:409076796536:function:*dynamodb-to-s3*
    - Effect: Allow
      Action:
        - lambda:CreateEventSourceMapping
      Resource:
        - arn:aws:lambda:us-west-2:409076796536:function:*
    - Effect: Allow
      Action:
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
        - dynamodb:UpdateTable
      Resource:
        - arn:aws:dynamodb:us-west-2:409076796536:table/${self:custom.service.STAGE}-*
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - logs:DescribeLogStreams
      Resource:
        - arn:aws:logs:*:*:*
functions:
  history-get:
    handler: lib/api/ods/history/get/index.getHistory
    description: ${self:custom.documentation.summary}
    timeout: 200
    events:
      - http:
          path: get-history
          method: GET
          cors: true
          documentation:
            summary: "[GET] History"
            queryParams:
            -
              name: "table_name"
              description: "Name of table to get history from"
            -
              name: "start_date"
              description: "Optional. Date from when to get history from."
            -
              name: "end_date"
              description: "Optional. Get history upto end date"
  
  dynamodb-to-s3:
    handler: lib/service/dbadmin/dynamo/trigger/index.handler
    description: ${self:custom.documentation.summary}
    timeout: 299
  
  dba-save-schema-to-s3:
    handler: lib/service/dbadmin/dynamo/schema/index.handler
    description: ${self:custom.documentation.summary}
    timeout: 299

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

package:
  # packages each lambda function by itself and have webpack do the tree-shaking
  individually: true,
  excludeDevDependencies: false
  exclude:
    - 'node_modules/**/aws-sdk/**'